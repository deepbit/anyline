parseConfig()


查询
public DataSet query(String src, ConfigStore configs, String ... conditions);
public DataSet query(String src, String ... conditions);
public DataSet query(String src, int fr, int to, String ... conditions);

集合参数值(通常在in查询条件是用到)
List<String> types = new ArrayList<String>();
types.add("A1");
types.add("A2");
DataSet set = service.query("MEMBER", parseConfig().addCondition("TYPE_CD",list));

查询单行
public DataRow queryRow(String src, ConfigStore configs, String ... conditions);
public DataRow queryRow(String src, String ... conditions);


查询结果封装成实体类
public <T> List<T> query(DataSource ds, Class<T> clazz, ConfigStore configs, String ... conditions);
public <T> T queryEntity(DataSource ds, Class<T> clazz, ConfigStore configs, String ... conditions);


保存(更新｜插入)
public int save(String dest, Object data, String ... columns);
public int save(Object data, String ... columns);
dest:指定保存到哪一个表(默认根据data的@Table注解指定的表)
columns:指定需要保存的列(默认保存全部)
系统默认根据主键是否为空判断最终调用更新还是插入
* save insert区别
* 操作单个对象时没有区别
* 在操作集合时区别:
* save会循环操作数据库每次都会判断insert|update
* save 集合中的数据可以是不同的表不同的结构 
* insert 集合中的数据必须保存到相同的表,结构必须相同
* insert 将一次性插入多条数据整个过程有可能只操作一次数据库  并 不考虑update情况 对于大批量数据来说 性能是主要优势

public int insert(String dest, Object data, String ... columns);
public int insert(Object data, String ... columns);
public int update(String dest, Object data, String ... columns);
public int update(Object data, String ... columns);




执行SQL
可执行XML中自定义SQL或直接执行原生SQL
public int execute(String src, ConfigStore configs, String ... conditions);
public int execute(String src, String ... conditions);

调用方式:
service.execute("hr.member:UPDATE_AGE", parseConfig("CD:cd","AGE:age"));
service.execute("UPDATE MEMBER SET LVL = 1 WHERE JOIN_DATE LIKE '2015%'");


删除
public int delete(String dest, Object data, String ... columns);
public int delete(Object data,  String ... columns);



执行存储过程
接口:
public List<Object> executeProcedure(String procedure, String... inputs);
public List<Object> executeProcedure(Procedure procedure);
调用:
List<Object> executeProcedure(String procedure, String... inputs);
Procedure proc = new ProcedureImpl("proc_test").addInput("1234").regOutput();
List<Object> result = service.executeProcedure(proc);

Procedure通过两种方法注册输出参数regOutput(Integer type) 或 regOutput();默认是varchar输出参数



根据存储过程查询结果集
接口:
public DataSet queryProcedure(String procedure, String ... inputs);
public DataSet queryProcedure(Procedure procedure);
调用:
DataSet set = service.queryProcedure("proc_test");
DataSet set = service.queryProcedure("proc_test","p1","p2");
DataSet set = service.queryProcedure(new ProcedureImpl("proc_test"));



